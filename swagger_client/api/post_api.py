# coding: utf-8

"""
    MTA 6.1.0 api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PostApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adoptionplans_post(self, requested_apps, **kwargs):  # noqa: E501
        """Generate an application dependency graph arranged in topological order.  # noqa: E501

        Graph generates an application dependency graph arranged in topological order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adoptionplans_post(requested_apps, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] requested_apps: requested App IDs (required)
        :return: ApiDependencyGraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adoptionplans_post_with_http_info(requested_apps, **kwargs)  # noqa: E501
        else:
            (data) = self.adoptionplans_post_with_http_info(requested_apps, **kwargs)  # noqa: E501
            return data

    def adoptionplans_post_with_http_info(self, requested_apps, **kwargs):  # noqa: E501
        """Generate an application dependency graph arranged in topological order.  # noqa: E501

        Graph generates an application dependency graph arranged in topological order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adoptionplans_post_with_http_info(requested_apps, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] requested_apps: requested App IDs (required)
        :return: ApiDependencyGraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['requested_apps']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adoptionplans_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'requested_apps' is set
        if self.api_client.client_side_validation and ('requested_apps' not in params or
                                                       params['requested_apps'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `requested_apps` when calling `adoptionplans_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'requested_apps' in params:
            path_params['requestedApps'] = params['requested_apps']  # noqa: E501
            collection_formats['requestedApps'] = 'csv'  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/adoptionplans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiDependencyGraph',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_bucket_wildcard_post(self, id, **kwargs):  # noqa: E501
        """Upload bucket content by ID and path.  # noqa: E501

        Upload bucket content by ID and path (handles both [post] and [put] requests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_bucket_wildcard_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_bucket_wildcard_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_bucket_wildcard_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_bucket_wildcard_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Upload bucket content by ID and path.  # noqa: E501

        Upload bucket content by ID and path (handles both [post] and [put] requests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_bucket_wildcard_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_bucket_wildcard_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_bucket_wildcard_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/bucket/{wildcard}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auth_login_post(self, **kwargs):  # noqa: E501
        """Login and obtain a bearer token.  # noqa: E501

        Login and obtain a bearer token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_login_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiLogin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auth_login_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auth_login_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def auth_login_post_with_http_info(self, **kwargs):  # noqa: E501
        """Login and obtain a bearer token.  # noqa: E501

        Login and obtain a bearer token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auth_login_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiLogin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_login_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/auth/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiLogin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def buckets_id_wildcard_post(self, id, **kwargs):  # noqa: E501
        """Upload bucket content by ID and path.  # noqa: E501

        Upload bucket content by ID and path (handles both [post] and [put] requests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.buckets_id_wildcard_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Bucket ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.buckets_id_wildcard_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.buckets_id_wildcard_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def buckets_id_wildcard_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Upload bucket content by ID and path.  # noqa: E501

        Upload bucket content by ID and path (handles both [post] and [put] requests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.buckets_id_wildcard_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Bucket ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method buckets_id_wildcard_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `buckets_id_wildcard_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '//buckets/{id}/{wildcard}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def importsummaries_upload_post(self, **kwargs):  # noqa: E501
        """Upload a CSV containing applications and dependencies to import.  # noqa: E501

        Upload a CSV containing applications and dependencies to import.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.importsummaries_upload_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiImportSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.importsummaries_upload_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.importsummaries_upload_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def importsummaries_upload_post_with_http_info(self, **kwargs):  # noqa: E501
        """Upload a CSV containing applications and dependencies to import.  # noqa: E501

        Upload a CSV containing applications and dependencies to import.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.importsummaries_upload_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiImportSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method importsummaries_upload_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/importsummaries/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiImportSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def taskgroups_id_bucket_wildcard_post(self, id, **kwargs):  # noqa: E501
        """Upload bucket content by ID and path.  # noqa: E501

        Upload bucket content by ID and path (handles both [post] and [put] requests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.taskgroups_id_bucket_wildcard_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: TaskGroup ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.taskgroups_id_bucket_wildcard_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.taskgroups_id_bucket_wildcard_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def taskgroups_id_bucket_wildcard_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Upload bucket content by ID and path.  # noqa: E501

        Upload bucket content by ID and path (handles both [post] and [put] requests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.taskgroups_id_bucket_wildcard_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: TaskGroup ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method taskgroups_id_bucket_wildcard_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `taskgroups_id_bucket_wildcard_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/taskgroups/{id}/bucket/{wildcard}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_id_bucket_wildcard_post(self, id, **kwargs):  # noqa: E501
        """Upload bucket content by ID and path.  # noqa: E501

        Upload bucket content by ID and path (handles both [post] and [put] requests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_bucket_wildcard_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_id_bucket_wildcard_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_id_bucket_wildcard_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tasks_id_bucket_wildcard_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Upload bucket content by ID and path.  # noqa: E501

        Upload bucket content by ID and path (handles both [post] and [put] requests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_bucket_wildcard_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_id_bucket_wildcard_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `tasks_id_bucket_wildcard_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{id}/bucket/{wildcard}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
