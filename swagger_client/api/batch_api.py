# coding: utf-8

"""
    MTA 6.1 api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BatchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_tags_post(self, tags, **kwargs):  # noqa: E501
        """Batch-create Tags.  # noqa: E501

        Batch-create Tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_tags_post(tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ApiTag] tags: Tags data (required)
        :return: list[ApiTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_tags_post_with_http_info(tags, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_tags_post_with_http_info(tags, **kwargs)  # noqa: E501
            return data

    def batch_tags_post_with_http_info(self, tags, **kwargs):  # noqa: E501
        """Batch-create Tags.  # noqa: E501

        Batch-create Tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_tags_post_with_http_info(tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ApiTag] tags: Tags data (required)
        :return: list[ApiTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_tags_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tags' is set
        if self.api_client.client_side_validation and ('tags' not in params or
                                                       params['tags'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tags` when calling `batch_tags_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/batch/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiTag]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_tickets_post(self, tickets, **kwargs):  # noqa: E501
        """Batch-create Tickets.  # noqa: E501

        Batch-create Tickets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_tickets_post(tickets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ApiTicket] tickets: Tickets data (required)
        :return: list[ApiTicket]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_tickets_post_with_http_info(tickets, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_tickets_post_with_http_info(tickets, **kwargs)  # noqa: E501
            return data

    def batch_tickets_post_with_http_info(self, tickets, **kwargs):  # noqa: E501
        """Batch-create Tickets.  # noqa: E501

        Batch-create Tickets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_tickets_post_with_http_info(tickets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ApiTicket] tickets: Tickets data (required)
        :return: list[ApiTicket]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tickets']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_tickets_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tickets' is set
        if self.api_client.client_side_validation and ('tickets' not in params or
                                                       params['tickets'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tickets` when calling `batch_tickets_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tickets' in params:
            body_params = params['tickets']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/batch/tickets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiTicket]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
