# coding: utf-8

"""
    MTA 6.1 api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ApplicationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def applications_delete(self, application, **kwargs):  # noqa: E501
        """Delete a applications.  # noqa: E501

        Delete applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_delete(application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] application: List of id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_delete_with_http_info(application, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_delete_with_http_info(application, **kwargs)  # noqa: E501
            return data

    def applications_delete_with_http_info(self, application, **kwargs):  # noqa: E501
        """Delete a applications.  # noqa: E501

        Delete applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_delete_with_http_info(application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] application: List of id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if self.api_client.client_side_validation and ('application' not in params or
                                                       params['application'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application` when calling `applications_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_get(self, **kwargs):  # noqa: E501
        """List all applications.  # noqa: E501

        List all applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ApiApplication]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.applications_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def applications_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all applications.  # noqa: E501

        List all applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ApiApplication]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiApplication]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_bucket_wildcard_delete(self, id, **kwargs):  # noqa: E501
        """Delete bucket content by ID and path.  # noqa: E501

        Delete bucket content by ID and path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_bucket_wildcard_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_bucket_wildcard_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_bucket_wildcard_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_bucket_wildcard_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete bucket content by ID and path.  # noqa: E501

        Delete bucket content by ID and path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_bucket_wildcard_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_bucket_wildcard_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_bucket_wildcard_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/bucket/{wildcard}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_bucket_wildcard_get(self, id, **kwargs):  # noqa: E501
        """Get bucket content by ID and path.  # noqa: E501

        Get bucket content by ID and path. Returns index.html for directories when Accept=text/html else a tarball. ?filter=glob supports directory content filtering.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_bucket_wildcard_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str filter: Filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_bucket_wildcard_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_bucket_wildcard_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_bucket_wildcard_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get bucket content by ID and path.  # noqa: E501

        Get bucket content by ID and path. Returns index.html for directories when Accept=text/html else a tarball. ?filter=glob supports directory content filtering.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_bucket_wildcard_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str filter: Filter
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_bucket_wildcard_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_bucket_wildcard_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/bucket/{wildcard}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_bucket_wildcard_post(self, id, **kwargs):  # noqa: E501
        """Upload bucket content by ID and path.  # noqa: E501

        Upload bucket content by ID and path (handles both [post] and [put] requests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_bucket_wildcard_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_bucket_wildcard_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_bucket_wildcard_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_bucket_wildcard_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Upload bucket content by ID and path.  # noqa: E501

        Upload bucket content by ID and path (handles both [post] and [put] requests).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_bucket_wildcard_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_bucket_wildcard_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_bucket_wildcard_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/bucket/{wildcard}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete an application.  # noqa: E501

        Delete an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Application id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an application.  # noqa: E501

        Delete an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Application id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_facts_get(self, id, **kwargs):  # noqa: E501
        """List facts.  # noqa: E501

        List facts. Can be filtered by source. By default facts from all sources are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str source: Fact source
        :return: list[ApiFact]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_facts_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_facts_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_facts_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List facts.  # noqa: E501

        List facts. Can be filtered by source. By default facts from all sources are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str source: Fact source
        :return: list[ApiFact]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_facts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_facts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/facts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiFact]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_facts_key_put(self, id, key, source, fact, **kwargs):  # noqa: E501
        """Update (or create) a fact.  # noqa: E501

        Update (or create) a fact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_key_put(id, key, source, fact, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str key: Fact key (required)
        :param str source: Fact source (required)
        :param ApiFact fact: Fact data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_facts_key_put_with_http_info(id, key, source, fact, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_facts_key_put_with_http_info(id, key, source, fact, **kwargs)  # noqa: E501
            return data

    def applications_id_facts_key_put_with_http_info(self, id, key, source, fact, **kwargs):  # noqa: E501
        """Update (or create) a fact.  # noqa: E501

        Update (or create) a fact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_key_put_with_http_info(id, key, source, fact, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str key: Fact key (required)
        :param str source: Fact source (required)
        :param ApiFact fact: Fact data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'key', 'source', 'fact']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_facts_key_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_facts_key_put`")  # noqa: E501
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `applications_id_facts_key_put`")  # noqa: E501
        # verify the required parameter 'source' is set
        if self.api_client.client_side_validation and ('source' not in params or
                                                       params['source'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `source` when calling `applications_id_facts_key_put`")  # noqa: E501
        # verify the required parameter 'fact' is set
        if self.api_client.client_side_validation and ('fact' not in params or
                                                       params['fact'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fact` when calling `applications_id_facts_key_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'source' in params:
            path_params['source'] = params['source']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'fact' in params:
            body_params = params['fact']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/facts/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_facts_key_source_delete(self, id, key, source, **kwargs):  # noqa: E501
        """Delete a fact.  # noqa: E501

        Delete a fact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_key_source_delete(id, key, source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str key: Fact key (required)
        :param str source: Fact source (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_facts_key_source_delete_with_http_info(id, key, source, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_facts_key_source_delete_with_http_info(id, key, source, **kwargs)  # noqa: E501
            return data

    def applications_id_facts_key_source_delete_with_http_info(self, id, key, source, **kwargs):  # noqa: E501
        """Delete a fact.  # noqa: E501

        Delete a fact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_key_source_delete_with_http_info(id, key, source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str key: Fact key (required)
        :param str source: Fact source (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'key', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_facts_key_source_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_facts_key_source_delete`")  # noqa: E501
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `applications_id_facts_key_source_delete`")  # noqa: E501
        # verify the required parameter 'source' is set
        if self.api_client.client_side_validation and ('source' not in params or
                                                       params['source'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `source` when calling `applications_id_facts_key_source_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'source' in params:
            path_params['source'] = params['source']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/facts/{key}/{source}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_facts_name_source_get(self, id, key, source, **kwargs):  # noqa: E501
        """Get fact by name.  # noqa: E501

        Get fact by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_name_source_get(id, key, source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str key: Fact key (required)
        :param str source: Fact source (required)
        :return: ApiFact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_facts_name_source_get_with_http_info(id, key, source, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_facts_name_source_get_with_http_info(id, key, source, **kwargs)  # noqa: E501
            return data

    def applications_id_facts_name_source_get_with_http_info(self, id, key, source, **kwargs):  # noqa: E501
        """Get fact by name.  # noqa: E501

        Get fact by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_name_source_get_with_http_info(id, key, source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str key: Fact key (required)
        :param str source: Fact source (required)
        :return: ApiFact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'key', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_facts_name_source_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_facts_name_source_get`")  # noqa: E501
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `applications_id_facts_name_source_get`")  # noqa: E501
        # verify the required parameter 'source' is set
        if self.api_client.client_side_validation and ('source' not in params or
                                                       params['source'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `source` when calling `applications_id_facts_name_source_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'source' in params:
            path_params['source'] = params['source']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/facts/{name}/{source}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiFact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_facts_post(self, id, fact, **kwargs):  # noqa: E501
        """Create a fact.  # noqa: E501

        Create a fact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_post(id, fact, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param ApiFact fact: Fact data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_facts_post_with_http_info(id, fact, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_facts_post_with_http_info(id, fact, **kwargs)  # noqa: E501
            return data

    def applications_id_facts_post_with_http_info(self, id, fact, **kwargs):  # noqa: E501
        """Create a fact.  # noqa: E501

        Create a fact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_post_with_http_info(id, fact, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param ApiFact fact: Fact data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fact']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_facts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_facts_post`")  # noqa: E501
        # verify the required parameter 'fact' is set
        if self.api_client.client_side_validation and ('fact' not in params or
                                                       params['fact'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fact` when calling `applications_id_facts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'fact' in params:
            body_params = params['fact']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/facts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_facts_put(self, id, source, **kwargs):  # noqa: E501
        """Replace all facts from a source.  # noqa: E501

        Replace all facts from a source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_put(id, source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str source: Source (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_facts_put_with_http_info(id, source, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_facts_put_with_http_info(id, source, **kwargs)  # noqa: E501
            return data

    def applications_id_facts_put_with_http_info(self, id, source, **kwargs):  # noqa: E501
        """Replace all facts from a source.  # noqa: E501

        Replace all facts from a source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_facts_put_with_http_info(id, source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str source: Source (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_facts_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_facts_put`")  # noqa: E501
        # verify the required parameter 'source' is set
        if self.api_client.client_side_validation and ('source' not in params or
                                                       params['source'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `source` when calling `applications_id_facts_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/facts', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_get(self, id, **kwargs):  # noqa: E501
        """Get an application by ID.  # noqa: E501

        Get an application by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Application ID (required)
        :return: ApiApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an application by ID.  # noqa: E501

        Get an application by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Application ID (required)
        :return: ApiApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_put(self, id, application, **kwargs):  # noqa: E501
        """Update an application.  # noqa: E501

        Update an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_put(id, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Application id (required)
        :param ApiApplication application: Application data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_put_with_http_info(id, application, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_put_with_http_info(id, application, **kwargs)  # noqa: E501
            return data

    def applications_id_put_with_http_info(self, id, application, **kwargs):  # noqa: E501
        """Update an application.  # noqa: E501

        Update an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_put_with_http_info(id, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Application id (required)
        :param ApiApplication application: Application data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_put`")  # noqa: E501
        # verify the required parameter 'application' is set
        if self.api_client.client_side_validation and ('application' not in params or
                                                       params['application'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application` when calling `applications_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_stakeholders_patch(self, id, application, **kwargs):  # noqa: E501
        """Update the owner and contributors of an Application.  # noqa: E501

        Update the owner and contributors of an Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_stakeholders_patch(id, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Application ID (required)
        :param ApiStakeholders application: Application stakeholders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_stakeholders_patch_with_http_info(id, application, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_stakeholders_patch_with_http_info(id, application, **kwargs)  # noqa: E501
            return data

    def applications_id_stakeholders_patch_with_http_info(self, id, application, **kwargs):  # noqa: E501
        """Update the owner and contributors of an Application.  # noqa: E501

        Update the owner and contributors of an Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_stakeholders_patch_with_http_info(id, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Application ID (required)
        :param ApiStakeholders application: Application stakeholders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_stakeholders_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_stakeholders_patch`")  # noqa: E501
        # verify the required parameter 'application' is set
        if self.api_client.client_side_validation and ('application' not in params or
                                                       params['application'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application` when calling `applications_id_stakeholders_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/stakeholders', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_tags_id_get(self, id, **kwargs):  # noqa: E501
        """List tag references.  # noqa: E501

        List tag references.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_tags_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :return: list[ApiRef]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_tags_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_tags_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def applications_id_tags_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """List tag references.  # noqa: E501

        List tag references.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_tags_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :return: list[ApiRef]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_tags_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_tags_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/tags/id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiRef]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_tags_patch(self, id, tags, **kwargs):  # noqa: E501
        """Replace tag associations.  # noqa: E501

        Replace tag associations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_tags_patch(id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param list[ApiTagRef] tags: Tag references (required)
        :param str source: Source
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_tags_patch_with_http_info(id, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_tags_patch_with_http_info(id, tags, **kwargs)  # noqa: E501
            return data

    def applications_id_tags_patch_with_http_info(self, id, tags, **kwargs):  # noqa: E501
        """Replace tag associations.  # noqa: E501

        Replace tag associations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_tags_patch_with_http_info(id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param list[ApiTagRef] tags: Tag references (required)
        :param str source: Source
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tags', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_tags_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_tags_patch`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if self.api_client.client_side_validation and ('tags' not in params or
                                                       params['tags'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tags` when calling `applications_id_tags_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/tags', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_tags_post(self, tag, **kwargs):  # noqa: E501
        """Add tag association.  # noqa: E501

        Ensure tag is associated with the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_tags_post(tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiRef tag: Tag data (required)
        :return: ApiRef
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_tags_post_with_http_info(tag, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_tags_post_with_http_info(tag, **kwargs)  # noqa: E501
            return data

    def applications_id_tags_post_with_http_info(self, tag, **kwargs):  # noqa: E501
        """Add tag association.  # noqa: E501

        Ensure tag is associated with the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_tags_post_with_http_info(tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiRef tag: Tag data (required)
        :return: ApiRef
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_tags_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag' is set
        if self.api_client.client_side_validation and ('tag' not in params or
                                                       params['tag'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag` when calling `applications_id_tags_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tag' in params:
            body_params = params['tag']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiRef',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_id_tags_sid_delete(self, id, sid, **kwargs):  # noqa: E501
        """Delete tag association.  # noqa: E501

        Ensure tag is not associated with the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_tags_sid_delete(id, sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str sid: Tag ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_tags_sid_delete_with_http_info(id, sid, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_tags_sid_delete_with_http_info(id, sid, **kwargs)  # noqa: E501
            return data

    def applications_id_tags_sid_delete_with_http_info(self, id, sid, **kwargs):  # noqa: E501
        """Delete tag association.  # noqa: E501

        Ensure tag is not associated with the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_tags_sid_delete_with_http_info(id, sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Application ID (required)
        :param str sid: Tag ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_tags_sid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_tags_sid_delete`")  # noqa: E501
        # verify the required parameter 'sid' is set
        if self.api_client.client_side_validation and ('sid' not in params or
                                                       params['sid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sid` when calling `applications_id_tags_sid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'sid' in params:
            path_params['sid'] = params['sid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}/tags/{sid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def applications_post(self, application, **kwargs):  # noqa: E501
        """Create an application.  # noqa: E501

        Create an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_post(application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiApplication application: Application data (required)
        :return: ApiApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_post_with_http_info(application, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_post_with_http_info(application, **kwargs)  # noqa: E501
            return data

    def applications_post_with_http_info(self, application, **kwargs):  # noqa: E501
        """Create an application.  # noqa: E501

        Create an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_post_with_http_info(application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiApplication application: Application data (required)
        :return: ApiApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if self.api_client.client_side_validation and ('application' not in params or
                                                       params['application'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application` when calling `applications_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
