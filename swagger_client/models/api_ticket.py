# coding: utf-8

"""
    MTA 6.2 api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ApiTicket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application': 'ApiRef',
        'create_time': 'str',
        'create_user': 'str',
        'error': 'bool',
        'fields': 'ApiFields',
        'id': 'int',
        'kind': 'str',
        'last_updated': 'str',
        'link': 'str',
        'message': 'str',
        'parent': 'str',
        'reference': 'str',
        'status': 'str',
        'tracker': 'ApiRef',
        'update_user': 'str'
    }

    attribute_map = {
        'application': 'application',
        'create_time': 'createTime',
        'create_user': 'createUser',
        'error': 'error',
        'fields': 'fields',
        'id': 'id',
        'kind': 'kind',
        'last_updated': 'lastUpdated',
        'link': 'link',
        'message': 'message',
        'parent': 'parent',
        'reference': 'reference',
        'status': 'status',
        'tracker': 'tracker',
        'update_user': 'updateUser'
    }

    def __init__(self, application=None, create_time=None, create_user=None, error=None, fields=None, id=None, kind=None, last_updated=None, link=None, message=None, parent=None, reference=None, status=None, tracker=None, update_user=None, _configuration=None):  # noqa: E501
        """ApiTicket - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application = None
        self._create_time = None
        self._create_user = None
        self._error = None
        self._fields = None
        self._id = None
        self._kind = None
        self._last_updated = None
        self._link = None
        self._message = None
        self._parent = None
        self._reference = None
        self._status = None
        self._tracker = None
        self._update_user = None
        self.discriminator = None

        self.application = application
        if create_time is not None:
            self.create_time = create_time
        if create_user is not None:
            self.create_user = create_user
        if error is not None:
            self.error = error
        if fields is not None:
            self.fields = fields
        if id is not None:
            self.id = id
        self.kind = kind
        if last_updated is not None:
            self.last_updated = last_updated
        if link is not None:
            self.link = link
        if message is not None:
            self.message = message
        self.parent = parent
        if reference is not None:
            self.reference = reference
        if status is not None:
            self.status = status
        self.tracker = tracker
        if update_user is not None:
            self.update_user = update_user

    @property
    def application(self):
        """Gets the application of this ApiTicket.  # noqa: E501


        :return: The application of this ApiTicket.  # noqa: E501
        :rtype: ApiRef
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this ApiTicket.


        :param application: The application of this ApiTicket.  # noqa: E501
        :type: ApiRef
        """
        if self._configuration.client_side_validation and application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")  # noqa: E501

        self._application = application

    @property
    def create_time(self):
        """Gets the create_time of this ApiTicket.  # noqa: E501


        :return: The create_time of this ApiTicket.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApiTicket.


        :param create_time: The create_time of this ApiTicket.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def create_user(self):
        """Gets the create_user of this ApiTicket.  # noqa: E501


        :return: The create_user of this ApiTicket.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this ApiTicket.


        :param create_user: The create_user of this ApiTicket.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def error(self):
        """Gets the error of this ApiTicket.  # noqa: E501


        :return: The error of this ApiTicket.  # noqa: E501
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ApiTicket.


        :param error: The error of this ApiTicket.  # noqa: E501
        :type: bool
        """

        self._error = error

    @property
    def fields(self):
        """Gets the fields of this ApiTicket.  # noqa: E501


        :return: The fields of this ApiTicket.  # noqa: E501
        :rtype: ApiFields
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ApiTicket.


        :param fields: The fields of this ApiTicket.  # noqa: E501
        :type: ApiFields
        """

        self._fields = fields

    @property
    def id(self):
        """Gets the id of this ApiTicket.  # noqa: E501


        :return: The id of this ApiTicket.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiTicket.


        :param id: The id of this ApiTicket.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this ApiTicket.  # noqa: E501


        :return: The kind of this ApiTicket.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApiTicket.


        :param kind: The kind of this ApiTicket.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def last_updated(self):
        """Gets the last_updated of this ApiTicket.  # noqa: E501


        :return: The last_updated of this ApiTicket.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ApiTicket.


        :param last_updated: The last_updated of this ApiTicket.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def link(self):
        """Gets the link of this ApiTicket.  # noqa: E501


        :return: The link of this ApiTicket.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ApiTicket.


        :param link: The link of this ApiTicket.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def message(self):
        """Gets the message of this ApiTicket.  # noqa: E501


        :return: The message of this ApiTicket.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApiTicket.


        :param message: The message of this ApiTicket.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def parent(self):
        """Gets the parent of this ApiTicket.  # noqa: E501


        :return: The parent of this ApiTicket.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ApiTicket.


        :param parent: The parent of this ApiTicket.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")  # noqa: E501

        self._parent = parent

    @property
    def reference(self):
        """Gets the reference of this ApiTicket.  # noqa: E501


        :return: The reference of this ApiTicket.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ApiTicket.


        :param reference: The reference of this ApiTicket.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this ApiTicket.  # noqa: E501


        :return: The status of this ApiTicket.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiTicket.


        :param status: The status of this ApiTicket.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tracker(self):
        """Gets the tracker of this ApiTicket.  # noqa: E501


        :return: The tracker of this ApiTicket.  # noqa: E501
        :rtype: ApiRef
        """
        return self._tracker

    @tracker.setter
    def tracker(self, tracker):
        """Sets the tracker of this ApiTicket.


        :param tracker: The tracker of this ApiTicket.  # noqa: E501
        :type: ApiRef
        """
        if self._configuration.client_side_validation and tracker is None:
            raise ValueError("Invalid value for `tracker`, must not be `None`")  # noqa: E501

        self._tracker = tracker

    @property
    def update_user(self):
        """Gets the update_user of this ApiTicket.  # noqa: E501


        :return: The update_user of this ApiTicket.  # noqa: E501
        :rtype: str
        """
        return self._update_user

    @update_user.setter
    def update_user(self, update_user):
        """Sets the update_user of this ApiTicket.


        :param update_user: The update_user of this ApiTicket.  # noqa: E501
        :type: str
        """

        self._update_user = update_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiTicket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiTicket):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiTicket):
            return True

        return self.to_dict() != other.to_dict()
