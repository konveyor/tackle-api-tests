# coding: utf-8

"""
    MTA 6.1 api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ApiIssueComposite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected': 'int',
        'category': 'str',
        'description': 'str',
        'effort': 'int',
        'labels': 'list[str]',
        'name': 'str',
        'rule': 'str',
        'rule_set': 'str'
    }

    attribute_map = {
        'affected': 'affected',
        'category': 'category',
        'description': 'description',
        'effort': 'effort',
        'labels': 'labels',
        'name': 'name',
        'rule': 'rule',
        'rule_set': 'ruleSet'
    }

    def __init__(self, affected=None, category=None, description=None, effort=None, labels=None, name=None, rule=None, rule_set=None, _configuration=None):  # noqa: E501
        """ApiIssueComposite - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._affected = None
        self._category = None
        self._description = None
        self._effort = None
        self._labels = None
        self._name = None
        self._rule = None
        self._rule_set = None
        self.discriminator = None

        if affected is not None:
            self.affected = affected
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if effort is not None:
            self.effort = effort
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        if rule is not None:
            self.rule = rule
        if rule_set is not None:
            self.rule_set = rule_set

    @property
    def affected(self):
        """Gets the affected of this ApiIssueComposite.  # noqa: E501


        :return: The affected of this ApiIssueComposite.  # noqa: E501
        :rtype: int
        """
        return self._affected

    @affected.setter
    def affected(self, affected):
        """Sets the affected of this ApiIssueComposite.


        :param affected: The affected of this ApiIssueComposite.  # noqa: E501
        :type: int
        """

        self._affected = affected

    @property
    def category(self):
        """Gets the category of this ApiIssueComposite.  # noqa: E501


        :return: The category of this ApiIssueComposite.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ApiIssueComposite.


        :param category: The category of this ApiIssueComposite.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this ApiIssueComposite.  # noqa: E501


        :return: The description of this ApiIssueComposite.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiIssueComposite.


        :param description: The description of this ApiIssueComposite.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def effort(self):
        """Gets the effort of this ApiIssueComposite.  # noqa: E501


        :return: The effort of this ApiIssueComposite.  # noqa: E501
        :rtype: int
        """
        return self._effort

    @effort.setter
    def effort(self, effort):
        """Sets the effort of this ApiIssueComposite.


        :param effort: The effort of this ApiIssueComposite.  # noqa: E501
        :type: int
        """

        self._effort = effort

    @property
    def labels(self):
        """Gets the labels of this ApiIssueComposite.  # noqa: E501


        :return: The labels of this ApiIssueComposite.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApiIssueComposite.


        :param labels: The labels of this ApiIssueComposite.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ApiIssueComposite.  # noqa: E501


        :return: The name of this ApiIssueComposite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiIssueComposite.


        :param name: The name of this ApiIssueComposite.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rule(self):
        """Gets the rule of this ApiIssueComposite.  # noqa: E501


        :return: The rule of this ApiIssueComposite.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this ApiIssueComposite.


        :param rule: The rule of this ApiIssueComposite.  # noqa: E501
        :type: str
        """

        self._rule = rule

    @property
    def rule_set(self):
        """Gets the rule_set of this ApiIssueComposite.  # noqa: E501


        :return: The rule_set of this ApiIssueComposite.  # noqa: E501
        :rtype: str
        """
        return self._rule_set

    @rule_set.setter
    def rule_set(self, rule_set):
        """Sets the rule_set of this ApiIssueComposite.


        :param rule_set: The rule_set of this ApiIssueComposite.  # noqa: E501
        :type: str
        """

        self._rule_set = rule_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiIssueComposite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiIssueComposite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiIssueComposite):
            return True

        return self.to_dict() != other.to_dict()
