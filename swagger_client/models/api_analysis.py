# coding: utf-8

"""
    MTA 6.1 api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 6.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ApiAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'str',
        'create_user': 'str',
        'dependencies': 'list[ApiTechDependency]',
        'id': 'int',
        'issues': 'list[ApiIssue]',
        'update_user': 'str'
    }

    attribute_map = {
        'create_time': 'createTime',
        'create_user': 'createUser',
        'dependencies': 'dependencies',
        'id': 'id',
        'issues': 'issues',
        'update_user': 'updateUser'
    }

    def __init__(self, create_time=None, create_user=None, dependencies=None, id=None, issues=None, update_user=None, _configuration=None):  # noqa: E501
        """ApiAnalysis - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_time = None
        self._create_user = None
        self._dependencies = None
        self._id = None
        self._issues = None
        self._update_user = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if create_user is not None:
            self.create_user = create_user
        if dependencies is not None:
            self.dependencies = dependencies
        if id is not None:
            self.id = id
        if issues is not None:
            self.issues = issues
        if update_user is not None:
            self.update_user = update_user

    @property
    def create_time(self):
        """Gets the create_time of this ApiAnalysis.  # noqa: E501


        :return: The create_time of this ApiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApiAnalysis.


        :param create_time: The create_time of this ApiAnalysis.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def create_user(self):
        """Gets the create_user of this ApiAnalysis.  # noqa: E501


        :return: The create_user of this ApiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this ApiAnalysis.


        :param create_user: The create_user of this ApiAnalysis.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def dependencies(self):
        """Gets the dependencies of this ApiAnalysis.  # noqa: E501


        :return: The dependencies of this ApiAnalysis.  # noqa: E501
        :rtype: list[ApiTechDependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this ApiAnalysis.


        :param dependencies: The dependencies of this ApiAnalysis.  # noqa: E501
        :type: list[ApiTechDependency]
        """

        self._dependencies = dependencies

    @property
    def id(self):
        """Gets the id of this ApiAnalysis.  # noqa: E501


        :return: The id of this ApiAnalysis.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiAnalysis.


        :param id: The id of this ApiAnalysis.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def issues(self):
        """Gets the issues of this ApiAnalysis.  # noqa: E501


        :return: The issues of this ApiAnalysis.  # noqa: E501
        :rtype: list[ApiIssue]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this ApiAnalysis.


        :param issues: The issues of this ApiAnalysis.  # noqa: E501
        :type: list[ApiIssue]
        """

        self._issues = issues

    @property
    def update_user(self):
        """Gets the update_user of this ApiAnalysis.  # noqa: E501


        :return: The update_user of this ApiAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._update_user

    @update_user.setter
    def update_user(self, update_user):
        """Sets the update_user of this ApiAnalysis.


        :param update_user: The update_user of this ApiAnalysis.  # noqa: E501
        :type: str
        """

        self._update_user = update_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiAnalysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiAnalysis):
            return True

        return self.to_dict() != other.to_dict()
